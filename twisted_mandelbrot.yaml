viewers:
  - title: Parameter space
    style: complex-plane
    size: 512x512
    resizable: true
    z-coord: C
    initial-center: 0
    initial-pixel-size: 1/128
    code: |
        init z : C to 0
        init k : Z to 0
        loop
          set z to f
          init d : R to |z - twist_center|
          if d > r0 and d < r1 then
            init theta : R to 2 pi (d - r0) / (r1 - r0)
            set z to e^(i theta) (z - twist_center) + twist_center
          set k to k + 1
          k < maxIters and not stop
        if k = maxIters then
          black
        else
          init c1 : Color to if im(z) > 0 then blue else yellow
          init c2 : Color to if im(z) > 0 then green else red
          init s : R to k + 1 - (log (log (|z|^2) / 2 log (maxRadius))) / log 2
          set s to cos (s pi / 10)
          set s to s s
          blend (s, c1, c2)
    tools:
      - name: "Select C"
        shortcut: s
        actions:
          - event: click
            code: output C to selectedC
          - event: drag
            code: output C to selectedC

  - title: Twisted dynamical plane
    style: complex-plane
    size: 512x512
    resizable: true
    z-coord: z
    pixel-size: px
    initial-center: 0
    initial-pixel-size: 1/128
    code: |
        init C : C to selectedC
        init k : Z to 0
        loop
          set z to f
          init d : R to |z - twist_center|
          if d > r0 and d < r1 then
            init theta : R to 2 pi (d - r0) / (r1 - r0)
            set z to e^(i theta) (z - twist_center) + twist_center
          set k to k + 1
          k < maxIters and not stop
        if k = maxIters then
          black
        else
          init c1 : Color to if im(z) > 0 then blue else yellow
          init c2 : Color to if im(z) > 0 then green else red
          init s : R to k + 1 - (log (log (|z|^2) / 2 log (maxRadius))) / log 2
          set s to cos (s pi / 10)
          set s to s s
          blend (s, c1, c2)

    tools:
      - name: Trace
        shortcut: t
        actions:
          - event: deactivated
            code: erase

          - event: click-or-drag
            code: |
              init C : C to selectedC
              init prevZ : C to z
              init k : Z to 0
              erase
              loop
                set prevZ to z
                draw point at z
                set z to f
                init d : R to |z - twist_center|
                if d > r0 and d < r1 then
                  init theta : R to 2 pi (d - r0) / (r1 - r0)
                  set z to e^(i theta) (z - twist_center) + twist_center
                draw line from z to prevZ
                set k to k + 1
                k < 100

      - name: Dehn twist
        shortcut: d
        actions:
          - event: activated
            code: |
              use red for stroke
              draw point at twist_center
              use white for stroke
              draw circle at twist_center with radius r0
              draw circle at twist_center with radius r1
          - event: deactivated
            code: erase
          - event: drag-finished
            code: output 0 to drag_target
          - event: drag
            start: z0
            code: |
              init eps : R to 5 px
              if drag_target = 0 then
                if |z0 - twist_center| < eps then
                  output 1 to drag_target
                  set drag_target to 1

                else if |(|z0 - twist_center|) - r0| < eps then
                  output 2 to drag_target
                  set drag_target to 2

                else if |(|z0 - twist_center|) - r1| < eps then
                  output 3 to drag_target
                  set drag_target to 3

              if drag_target = 1 then
                output z to twist_center
                set twist_center to z
              if drag_target = 2 then
                output |z - twist_center| to r0
                set r0 to |z - twist_center|
              if drag_target = 3 then
                output |z - twist_center| to r1
                set r1 to |z - twist_center|
              if drag_target > 0 then
                erase
                use red for stroke
                draw point at twist_center
                use white for stroke
                draw circle at twist_center with radius r0
                draw circle at twist_center with radius r1


setup:
  title: Parametric complex dynamics
  size: 200x200
  vertical-contents:
    - text-entry:
        label: "Iterate f(z) = "
        value: "z^2 + C"
        type: C
        environment:
          z: C
          C: C
        variable: f
    - text-entry:
        label: "until"
        value: "|z| > maxRadius"
        environment:
          z: C
          C: C
          maxRadius: R
        type: Boolean
        variable: stop

configuration:
  title: Configuration
  size: 400x200
  vertical-contents:
    - text-entry:
        label: "Selected value of C:"
        value: -0.1226 + 0.7449i
        type: C
        variable: selectedC
    - panel:
        title: "Dehn twist"
        vertical-contents:
          - text-entry:
              label: "Center of twist:"
              value: -0.267 + 0.478i
              type: C
              variable: twist_center
          - horizontal-contents:
              - text-entry:
                  label: "Inner radius"
                  value: 0.2
                  type: R
                  variable: r0
              - text-entry:
                  label: "Outer radius"
                  value: 0.5
                  type: R
                  variable: r1
    - text-entry:
        label: "Max. iterations: "
        value: "100"
        type: Z
        variable: maxIters
    - text-entry:
        label: "Max. radius: "
        value: 10
        type: R
        variable: maxRadius
    - text-entry:
        label: "Dehn tool drag target: "
        value: "0"
        type: Z
        variable: drag_target
