viewer:
  style: complex-plane
  title: Roots of {f}
  size: 512x512
  resizable: true
  z-coord: z
  pixel-size: px
  initial-center: 0
  initial-pixel-size: 1/128
  code: |
        init k : Z to 0
        init lastZ : C to 0
        loop
          set lastZ to z
          init f : C to (z - a) (z - b) (z - c)
          init df : C to (z - a) (z - b) + (z - a) (z - c) + (z - b) (z - c)
          set z to z - f / df
          set k to k + 1
          k < maxIters and |z - lastZ| > tol
        init col : Color to yellow
        if |z - a| < tol then
          set col to red
        else if |z - b| < tol then
          set col to green
        else if |z - c| < tol then
          set col to blue
        init s : R to k
        set s to cos (s pi / 10)
        set s to s s
        if k = maxIters then black else blend (s, dark col, light col)

  tools:
    - name: Trace
      shortcut: t
      actions:
        - event: deactivated
          code: erase
        - event: click-or-drag
          code: |
            init k : Z to 0
            init lastZ : C to 0
            erase
            loop
              set lastZ to z
              init f : C to (z - a) (z - b) (z - c)
              init df : C to (z - a) (z - b) + (z - a) (z - c) + (z - b) (z - c)
              set z to z - f / df
              draw point at lastZ
              draw line from lastZ to z
              set k to k + 1
              k < maxIters and |z - lastZ| > tol
            draw point at z

    - name: Move roots
      shortcut: m
      actions:
        - event: activated
          code: |
            draw point at a
            draw point at b
            draw point at c
        - event: deactivated
          code: erase
        - event: drag
          start: z0
          code: |
            if drag_target = 0 then
              if |z0 - a| < rad px then
                output 1 to drag_target
                set drag_target to 1
              else if |z0 - b| < rad px then
                output 2 to drag_target
                set drag_target to 2
              else if |z0 - c| < rad px then
                output 3 to drag_target
                set drag_target to 3
            else if drag_target = 1 then
              output z to a
              set a to z
            else if drag_target = 2 then
              output z to b
              set b to z
            else if drag_target = 3 then
              output z to c
              set c to z
            erase
            draw point at a
            draw point at b
            draw point at c
        - event: drag-finished
          code: output 0 to drag_target

configuration:
  title: Newton's method configuration
  size: 400x200
  vertical-contents:
    - panel:
        title: "Roots"
        vertical-contents:
          - text-entry:
              label: "a ="
              value: 1
              type: C
              variable: a
          - text-entry:
              label: "b ="
              value: e^(2 pi i / 3)
              type: C
              variable: b
          - text-entry:
              label: "c ="
              value: e^(-2 pi i / 3)
              type: C
              variable: c
    - text-entry:
        label: "closeness"
        value: "0.01"
        type: R
        variable: tol
    - text-entry:
        label: "grab radius (px)"
        value: "5"
        type: R
        variable: rad
    - text-entry:
        label: "Max. iterations: "
        value: "100"
        type: Z
        variable: maxIters
    - text-entry:
        label: "Drag target: "
        value: "0"
        type: Z
        variable: drag_target
